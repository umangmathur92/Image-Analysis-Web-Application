<!DOCTYPE html>
<html lang="en">
<head>
    <title>Edit Experiment</title>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="/stylesheets/style.css">
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
    <link rel="stylesheet" href="/stylesheets/cropper.css">

    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
    <script src="https://use.fontawesome.com/8a92be1af5.js"></script>

    <style type="text/css">
        body {
            width: 100%;
            margin: 0 auto;
            padding: 0px;
            font-family: helvetica;
            background-color: #0B3861;
        }
        .navbar {
            margin-bottom: 0;
            background-color: #f4511e;
            z-index: 9999;
            border: 0;
            font-size: 12px !important;
            line-height: 1.42857143 !important;
            letter-spacing: 4px;
            border-radius: 0;
            font-family: Montserrat, sans-serif;
        }
        .navbar li a, .navbar .navbar-brand {
            color: #fff !important;
        }
        .navbar-nav li a:hover, .navbar-nav li.active a {
            color: #f4511e !important;
            background-color: #fff !important;
        }
        .navbar-default .navbar-toggle {
            border-color: transparent;
            color: #fff !important;
        }
        .jumbocolor{
            background-color: #f4511e;
            color:#fff;
        }
        .divtop{
            margin-top:75px;
        }
        .table {
            display: table;
            border-collapse: separate;
            border-spacing: 10px 50px;
        }
        .tableRow {
            display: table-row;
        }
        .tableCell {
            display: table-cell;
            vertical-align: top;
        }
        .box {
            border: 10px solid rgba(238, 238, 238, 0.6);
            background-color: rgba(238, 238, 238, 0.2);
        }
        #wrapper
        {
            text-align:center;
            margin:0 auto;
            padding:0px;
            width:995px;
        }
        #output_image
        {
            max-width:300px;
        }
        h1{
            color: white;
        }
        .container {
            max-width: 960px;
            margin: 20px auto;
        }

        img {
            max-width: 100%;
        }

        .row,
        .preview {
            overflow: hidden;
        }

        .col {
            float: left;
        }

        .col-6 {
            width: 50%;
        }

        .col-3 {
            width: 25%;
        }

        .col-2 {
            width: 16.7%;
        }

        .col-1 {
            width: 8.3%;
        }
    </style>

</head>
<body>

<div class="container">
    <div class="container">
        <nav class="navbar navbar-default navbar-fixed-top">
            <div class="container">
                <div class="navbar-header">
                    <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#myNavbar">
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                        <span class="icon-bar"></span>
                    </button>
                    <a class="navbar-brand" href="/home">EWA</a>
                </div>
                <div class="collapse navbar-collapse" id="myNavbar">
                    <ul class="nav navbar-nav navbar-right">
                        <li><a href="#"><span class="glyphicon glyphicon-user"></span> Welcome,  <%= uname %>!</a></li>
                        <li>
                            <form class="form" id="form" method="POST" action="/logout">
                                <a href="/logout" onclick="document.getElementById('form').submit(); return false;"></span> Logout</a></a>
                            </form>
                        </li>
                    </ul>
                </div>
            </div>
        </nav>

    </div>

    <div class="row divtop">

    <div class="table">
        <div class="tableRow">
            <div class="tableCell box">
                <canvas id="panel" width="380" height="380"></canvas>
                <p>

                    <button class="btn btn-primary" type="submit" id="cropBttn">
                        Crop
                    </button>

                    <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#applyChangesModal">
                        Apply Changes
                    </button>

                </p>
            </div>
            <div class="tableCell box">
                <img src="" id="croppedImage">
            </div>
        </div>
    </div>

    <!--apply changes modal-->
    <div class="modal fade" id="applyChangesModal" tabindex="-1" role="dialog" aria-labelledby="applyChangesModal"
         aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <h4 class="modal-title">Apply Changes</h4>
                </div>

                <div class="modal-body">

                    <% for (var i = 0; i < data.length; i++) { %>

                    <form class="form" method="POST" action="<%= data[i].exp_id %>"
                          enctype="multipart/form-data">

                        <input type="image" id="myImg" name="expImage" required autofocus/><br>
                        <!--<button class="btn btn-primary btn-block" type="submit">-->
                            <!--Add Images-->
                        <!--</button>-->

                        <p id="demo"> Are you sure you want to apply the changes to the images?</p>

                        <button type="button" class="btn btn-default" data-dismiss="modal">No</button>

                        <button class="btn btn-primary" type="submit" id="applyChangesBtn">
                            Yes
                        </button>

                        <% } %>

                    </form>

                    <!--<form method="POST" action="getdata.php" enctype="multipart/form-data">-->
                        <!--<input type="image" id="myImg" name="myimage" width="500" height="500">-->
                    <!--</form>-->

                    <!--<img id="myImg" src="" name="expImage" width="107" height="98">-->

                </div>

                <!--<div class="modal-footer">-->
                    <!--<button type="button" class="btn btn-default" data-dismiss="modal">No</button>-->

                    <!--<button class="btn btn-primary" type="submit" id="applyChangesBtn">-->
                        <!--Yes-->
                    <!--</button>-->
                <!--</div>-->

            </div>
        </div>
    </div>

</div>

</div>

</body>

<script type="text/javascript">

    let imageData;
    let base64;
    let imageCropper = {

        ctx: null,

        image: null,

        click: false,

        downPointX: 40,

        downPointY: 40,

        lastPointX: 0,

        lastPointY: 0,

        hoverBoxSize: 5,

        cropedFile: null,

        resize: false,

        canvasBackgroundColor: "#FFFFFF",

        init: function() {
            this.ctx = document.getElementById("panel").getContext("2d");
            let imageUploader = document.getElementById('imageLoader');
            this.initCanvas();
            document.getElementById("cropBttn").onclick = this.cropImage.bind(this);
        },

        initCanvas: function(image) {
            this.image = new Image();
            this.image.setAttribute('crossOrigin', 'anonymous'); //optional,  it is needed only if your image is not avalible on same domain.
            this.image.setAttribute("width", "600px");
            this.image.setAttribute("height", "400px");
            let oldURL = "<%= data[0].exp_images %>";
            let newURL = oldURL.replace(/^https:\/\//i, 'http://');
            console.log(newURL);

            this.image.src = newURL;
            this.image.onload = function() {
                this.ctx.canvas.width = 500;
                this.ctx.canvas.height = 500;
                this.reDrawCanvas();
                this.initEventsOnCanvas();
            }.bind(this);
        },

        /**
         * Initlize mousedown and mouseup event, third brother of this type of event, onmousemove, will be set little letter.
         *
         */
        initEventsOnCanvas: function() {
            this.ctx.canvas.onmousedown = this.onMouseDown.bind(this);
            this.ctx.canvas.onmouseup = this.onMouseUp.bind(this);
        },

        /**
         * This event is bit tricky!
         * Normal task of this method is to pin point the starting point, from where we will  strat making the selectin box.
         * However, it work diffrently if user is hover over the resize boxes
         *
         */
        onMouseDown: function(e) {
            let loc = this.windowToCanvas(e.clientX, e.clientY);
            e.preventDefault();
            this.click = true;
            if (!this.resize) {
                this.ctx.canvas.onmousemove = this.onMouseMove.bind(this);
                this.downPointX = loc.x;
                this.downPointY = loc.y;
                this.lastPointX = loc.x;
                this.lastPointY = loc.y;
            }
        },

        /**
         * register normal movement, with click but no re-size.
         */
        onMouseMove: function(e) {
            e.preventDefault();
            if (this.click) {
                let loc = this.windowToCanvas(e.clientX, e.clientY);
                this.lastPointX = loc.x;
                this.lastPointY = loc.y;
                this.reDrawCanvas();
            }
        },

        onMouseUp: function(e) {
            e.preventDefault();
            this.ctx.canvas.onmousemove = this.onImageResize.bind(this);
            this.click = false;
        },

        reDrawCanvas: function() {
            this.clearCanvas();
            this.drawImage();
            this.drawSelRect();
            this.drawResizerBox();
        },

        clearCanvas: function() {
            this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
            this.ctx.fillStyle = this.canvasBackgroundColor;
            this.ctx.fillRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
        },

        /**
         * Draw image on canvas.
         */
        drawImage: function() {
            this.ctx.drawImage(this.image, 0, 0);
        },

        /**
         * Draw selection box on canvas
         */
        drawSelRect: function() {
            this.ctx.strokeStyle = '#000000';
            this.ctx.lineWidth = 1;
            this.ctx.strokeRect(this.downPointX, this.downPointY, (this.lastPointX - this.downPointX), (this.lastPointY - this.downPointY));
        },

        /**
         * This method take care of resizeing the selection box.
         * It does so by looking on (click == true and hover on resize box == true)
         * if both are true, it adjust the resize.
         *
         * @param  {[type]} e [description]
         * @return {[type]}   [description]
         */
        onImageResize: function(e) {
            let centerPointX = (this.lastPointX + this.downPointX) / 2;
            let centerPointY = (this.lastPointY + this.downPointY) / 2;
            let loc = this.windowToCanvas(e.clientX, e.clientY);
            this.ctx.fillStyle = '#FF0000';
            this.ctx.lineWidth = 1;
            if (this.isResizeBoxHover(loc, centerPointX, this.downPointY)) {
                if (this.click) {
                    this.downPointY = loc.y;
                    this.reDrawCanvas();
                }
            } else if (this.isResizeBoxHover(loc, this.lastPointX, centerPointY)) {
                if (this.click) {
                    this.lastPointX = loc.x;
                    this.reDrawCanvas();
                }
            } else if (this.isResizeBoxHover(loc, centerPointX, this.lastPointY)) {
                if (this.click) {
                    this.lastPointY = loc.y;
                    this.reDrawCanvas();
                }
            } else if (this.isResizeBoxHover(loc, this.downPointX, centerPointY)) {
                if (this.click) {
                    this.downPointX = loc.x;
                    this.reDrawCanvas();
                }
            } else {
                this.resize = false;
                this.reDrawCanvas();
            }
        },

        /**
         * Detect the mousehover on given axis
         */
        isResizeBoxHover: function(loc, xPoint, yPoint) {
            let hoverMargin = 3;
            if (loc.x > (xPoint - this.hoverBoxSize - hoverMargin) && loc.x < (xPoint + this.hoverBoxSize + hoverMargin) && loc.y > (yPoint - this.hoverBoxSize - hoverMargin) && loc.y < (yPoint + 5 + hoverMargin)) {
                this.ctx.fillRect(xPoint - this.hoverBoxSize, yPoint - this.hoverBoxSize, this.hoverBoxSize * 2, this.hoverBoxSize * 2);
                this.resize = true;
                return true;
            }
            return false;
        },

        /**
         * Draw 4 resize box of 10 x 10
         * @return {[type]} [description]
         */
        drawResizerBox: function() {
            let centerPointX = (this.lastPointX + this.downPointX) / 2;
            let centerPointY = (this.lastPointY + this.downPointY) / 2;
            this.ctx.fillStyle = '#000000';
            this.ctx.lineWidth = 1;
            this.ctx.fillRect(centerPointX - this.hoverBoxSize, this.downPointY - this.hoverBoxSize, this.hoverBoxSize * 2, this.hoverBoxSize * 2);
            this.ctx.fillRect(this.lastPointX - this.hoverBoxSize, centerPointY - this.hoverBoxSize, this.hoverBoxSize * 2, this.hoverBoxSize * 2);
            this.ctx.fillRect(centerPointX - this.hoverBoxSize, this.lastPointY - this.hoverBoxSize, this.hoverBoxSize * 2, this.hoverBoxSize * 2);
            this.ctx.fillRect(this.downPointX - this.hoverBoxSize, centerPointY - this.hoverBoxSize, this.hoverBoxSize * 2, this.hoverBoxSize * 2);
        },

        /**
         * Translate to HTML coardinates to Canvas coardinates.
         */
        windowToCanvas: function(x, y) {
            let canvas = this.ctx.canvas,
                bbox = canvas.getBoundingClientRect();
            return {
                x: x - bbox.left * (canvas.width / bbox.width),
                y: y - bbox.top * (canvas.height / bbox.height)
            };
        },

        /**
         * Get the canavs, remove cutout, create image elemnet on UI.
         * @return {[type]}
         */
        cropImage: function() {
            let tempCtx = document.createElement('canvas').getContext('2d');
            tempCtx.canvas.width = 500;
            tempCtx.canvas.height = 500;
            console.log(this.downPointX, this.downPointY, (this.lastPointX - this.downPointX), (this.lastPointY - this.downPointY));
            tempCtx.drawImage(this.image, this.downPointX, this.downPointY, (this.lastPointX - this.downPointX), (this.lastPointY - this.downPointY), 0, 0, (this.lastPointX - this.downPointX), (this.lastPointY - this.downPointY));
            base64 = tempCtx.canvas.toDataURL();
            document.getElementById('croppedImage').src = base64;
            console.log("outside:" +base64);

            document.getElementById("myImg").src = base64;
        }
    }

    function preview_image(event)
    {
        let reader = new FileReader();
        reader.onload = function()
        {
            let output = document.getElementById('output_image');
            output.src = reader.result;
        }
        reader.readAsDataURL(event.target.files[0]);
    }

    imageCropper.init();

    function base64ToBlob(base64, mime) {
        mime = mime || '';
        let sliceSize = 1024;
        let byteChars = window.atob(base64);
        let byteArrays = [];

        for (let offset = 0, len = byteChars.length; offset < len; offset += sliceSize) {
            let slice = byteChars.slice(offset, offset + sliceSize);

            let byteNumbers = new Array(slice.length);
            for (let i = 0; i < slice.length; i++) {
                byteNumbers[i] = slice.charCodeAt(i);
            }

            let byteArray = new Uint8Array(byteNumbers);

            byteArrays.push(byteArray);
        }

        return new Blob(byteArrays, {type: mime});
    }

    $("#applyChangesBtn").click(function (e) {
        e.preventDefault();

        let image = $('#croppedImage').attr('src');
        console.log("base64 data: " +image);
        let base64ImageContent = image.replace(/^data:image\/(png|jpg);base64,/, "");
        console.log("IMAGE: " + base64ImageContent);

        // Convert to blob
        let blob = base64ToBlob(base64ImageContent, 'image/png');
        console.log("BLOB: " + blob);

        // Create a FormData and append the file
        let formData = new FormData();
        formData.append('picture', blob);
        console.log(formData);

        $.ajax({
            type: "POST",
            url: window.location.href,
            cache: false,
            contentType: false,
            processData: false,
            data: formData})
            .done(function(e){
                alert('done!');
            });

//            data: {images: formData},
//            success: function (result) {
//                location.href = window.location.href
//            },
//            error: function (err) {
//                console.log(err)
//            }
//        });

//            data: {images: formData}})
////            data: formData})
//            .done(function(e){
//                alert('done!');
//            });
    });

</script>

</html>